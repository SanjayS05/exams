SQL injection
{
Attack:
import sqlite3

# Connect to the database
conn = sqlite3.connect('example.db')
cursor = conn.cursor()

# Vulnerable function where user input is directly added to the SQL query
def get_user_by_username(username):
    query = f"SELECT * FROM users WHERE username = '{username}'"
    cursor.execute(query)
    return cursor.fetchall()

# Example usage (dangerous input can be used for SQL injection)
user_input = input("Enter username: ")  # e.g., ' OR '1'='1
result = get_user_by_username(user_input)
print(result)

conn.close()

Def:
import sqlite3

# Connect to the database
conn = sqlite3.connect('example.db')
cursor = conn.cursor()

# Secure function with parameterized queries
def get_user_by_username(username):
    query = "SELECT * FROM users WHERE username = ?"
    cursor.execute(query, (username,))
    return cursor.fetchall()

# Example usage (safe from SQL injection)
user_input = input("Enter username: ")
result = get_user_by_username(user_input)
print(result)

conn.close()

}

XSS
{
Attack:
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib

class XSSVulnerableServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        
        # Retrieve the user input from the query string
        query = urllib.parse.parse_qs(urllib.parse.urlparse(self.path).query)
        user_input = query.get('input', [''])[0]  # Vulnerable to XSS
        
        # Render the input directly in the response (unsafe)
        response = f"""
        <html>
            <body>
                <h1>Search Result</h1>
                <p>You searched for: {user_input}</p>
            </body>
        </html>
        """
        self.wfile.write(response.encode('utf-8'))

if __name__ == "__main__":
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, XSSVulnerableServer)
    print("Starting server at http://localhost:8080")
    httpd.serve_forever()

Def:
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib
import html

class XSSSafeServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        
        # Retrieve the user input from the query string
        query = urllib.parse.parse_qs(urllib.parse.urlparse(self.path).query)
        user_input = query.get('input', [''])[0]

        # Sanitize the user input to prevent XSS (escaping dangerous characters)
        safe_input = html.escape(user_input)
        
        # Render the safe input in the response
        response = f"""
        <html>
            <body>
                <h1>Search Result</h1>
                <p>You searched for: {safe_input}</p>
            </body>
        </html>
        """
        self.wfile.write(response.encode('utf-8'))

if __name__ == "__main__":
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, XSSSafeServer)
    print("Starting server at http://localhost:8080")
    httpd.serve_forever()
}

HTTP host header
{
curl -H "Host: attacker.com" "http://localhost:8080/reset-password"

Attack:
from http.server import BaseHTTPRequestHandler, HTTPServer

class HostHeaderVulnerableServer(BaseHTTPRequestHandler):
    def do_GET(self):
        # Trust the Host header from the incoming request
        host = self.headers.get('Host')
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        if self.path == '/reset-password':
            # Construct a password reset link using the Host header
            reset_link = f"http://{host}/reset-confirm?token=abc123"
            response = f"""
            <html>
                <body>
                    <h1>Password Reset</h1>
                    <p>Click <a href="{reset_link}">here</a> to reset your password.</p>
                </body>
            </html>
            """
        else:
            response = "<html><body><h1>Welcome to the vulnerable server!</h1></body></html>"

        self.wfile.write(response.encode('utf-8'))

if __name__ == "__main__":
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, HostHeaderVulnerableServer)
    print("Starting vulnerable server at http://localhost:8080")
    httpd.serve_forever()


Def:
from http.server import BaseHTTPRequestHandler, HTTPServer

# Define a whitelist of trusted hostnames
ALLOWED_HOSTS = ['localhost:8080', '127.0.0.1:8080']

class HostHeaderSecureServer(BaseHTTPRequestHandler):
    def do_GET(self):
        # Extract the Host header
        host = self.headers.get('Host')

        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        # Validate the Host header against the whitelist
        if host not in ALLOWED_HOSTS:
            response = f"""
            <html>
                <body>
                    <h1>Invalid Host Header</h1>
                    <p>Access denied: The Host header <strong>{host}</strong> is not allowed.</p>
                </body>
            </html>
            """
        elif self.path == '/reset-password':
            # Construct a password reset link using a valid Host header
            reset_link = f"http://{host}/reset-confirm?token=abc123"
            response = f"""
            <html>
                <body>
                    <h1>Password Reset</h1>
                    <p>Click <a href="{reset_link}">here</a> to reset your password.</p>
                </body>
            </html>
            """
        else:
            response = "<html><body><h1>Welcome to the secure server!</h1></body></html>"

        self.wfile.write(response.encode('utf-8'))

if __name__ == "__main__":
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, HostHeaderSecureServer)
    print("Starting secure server at http://localhost:8080")
    httpd.serve_forever()

}

Clickjacking
{
Attack:
from http.server import BaseHTTPRequestHandler, HTTPServer

class ClickjackingVulnerableServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        response = """
        <html>
            <body>
                <h1>Welcome to the vulnerable server!</h1>
                <p>This site is vulnerable to clickjacking attacks because it can be embedded in an iframe.</p>
                <button onclick="alert('Button clicked!')">Click Me</button>
            </body>
        </html>
        """
        self.wfile.write(response.encode('utf-8'))

if __name__ == "__main__":
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, ClickjackingVulnerableServer)
    print("Starting vulnerable server at http://localhost:8080")
    httpd.serve_forever()

    HTML CODE:
    {
             <!-- attacker_page.html -->
            <!DOCTYPE html>
            <html>
                <body>
                    <h1>This is the attacker-controlled page</h1>
                    <p>Click the button below:</p>
                    <iframe src="http://localhost:8080" width="800" height="600" style="opacity: 0.5; position: absolute; top: 0; left: 0;"></iframe>
                    <button style="position: relative; z-index: 2;">Click Me</button>
                </body>
            </html>
    }

Def:
from http.server import BaseHTTPRequestHandler, HTTPServer

class ClickjackingSecureServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        # Mitigate clickjacking by setting X-Frame-Options header
        self.send_header('X-Frame-Options', 'DENY')  # Prevent embedding in any iframe
        # Alternative approach: using Content Security Policy (CSP)
        # self.send_header('Content-Security-Policy', "frame-ancestors 'none';")
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        response = """
        <html>
            <body>
                <h1>Welcome to the secure server!</h1>
                <p>This site is protected from clickjacking attacks.</p>
                <button onclick="alert('Button clicked!')">Click Me</button>
            </body>
        </html>
        """
        self.wfile.write(response.encode('utf-8'))

if __name__ == "__main__":
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, ClickjackingSecureServer)
    print("Starting secure server at http://localhost:8080")
    httpd.serve_forever()


}
class ShoppingCart:
    def __init__(self):
        self.cart = {}  # Holds item and quantity
        self.paid_for = {}  # Holds paid items and quantities
    
    def add_item(self, item, quantity):
        if item in self.cart:
            self.cart[item] += quantity
        else:
            self.cart[item] = quantity
        print(f"Added {quantity} {item}(s) to the cart.")

    def view_cart(self):
        print("Current cart contents:")
        for item, quantity in self.cart.items():
            print(f"{item}: {quantity}")
    
    def pay(self):
        self.paid_for = self.cart.copy()  # Simulate paying for the cart
        print(f"Paid for {self.paid_for}")
        self.cart = {}  # Clear cart after payment
    
    def add_after_payment(self, item, quantity):
        if item in self.paid_for:
            self.paid_for[item] += quantity
        else:
            self.paid_for[item] = quantity
        print(f"Added {quantity} {item}(s) to the paid order after payment!")
    
    def finalize_order(self):
        print(f"Final order contains: {self.paid_for}")
    
# Simulating the business logic flaw
cart = ShoppingCart()

# Adding initial items to the cart
cart.add_item('tshirt', 3)
cart.view_cart()

# Paying for the items
cart.pay()

# Adding more items after the payment (the flaw)
cart.add_after_payment('tshirt', 2)

# Finalizing the order (shows 3+2 tshirts while only paying for 3)
cart.finalize_order()
